generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  Resume   Resume[]
}

model Resume {
  id        Int         @id @default(autoincrement())
  basics    Basics      @relation(fields: [basicsId], references: [id])
  skills    Skills      @relation(fields: [skillsId], references: [id])
  work      Work[]
  education Education[]
  awards    Award[]
  volunteer Volunteer[]
  basicsId  Int
  skillsId  Int
  user      User?       @relation(fields: [userId], references: [id])
  userId    Int?
}

model Basics {
  id        Int        @id @default(autoincrement())
  name      String
  dob       String
  label     String
  image     String
  email     String
  phone     String
  url       String
  summary   String
  country   String
  relExp    String
  totalExp  String
  objective String
  languages Language[]
  profiles  Profile[]
  Resume    Resume[]
}

model Language {
  id       Int     @id @default(autoincrement())
  value    String
  level    Int
  Basics   Basics? @relation(fields: [basicsId], references: [id])
  basicsId Int?
}

model Profile {
  id       Int     @id @default(autoincrement())
  network  String
  value    String
  Basics   Basics? @relation(fields: [basicsId], references: [id])
  basicsId Int?
}

model Work {
  id            Int     @id @default(autoincrement())
  name          String
  position      String
  country       String
  url           String
  startDate     String
  isWorkingHere Boolean
  endDate       String?
  summary       String
  years         String
  Resume        Resume? @relation(fields: [resumeId], references: [id])
  resumeId      Int?
}

model Education {
  id             Int     @id @default(autoincrement())
  institution    String
  studyType      String
  area           String
  startDate      String
  isStudyingHere Boolean
  endDate        String?
  description    String
  Resume         Resume? @relation(fields: [resumeId], references: [id])
  resumeId       Int?
}

model Award {
  id       Int     @id @default(autoincrement())
  title    String
  date     String
  awarder  String
  summary  String
  Resume   Resume? @relation(fields: [resumeId], references: [id])
  resumeId Int?
}

model Volunteer {
  id                Int     @id @default(autoincrement())
  organization      String
  position          String
  url               String
  startDate         String
  endDate           String
  summary           String
  isVolunteeringNow Boolean
  Resume            Resume? @relation(fields: [resumeId], references: [id])
  resumeId          Int?
}

model Skills {
  id           Int             @id @default(autoincrement())
  languages    LanguageSkill[]
  frameworks   Framework[]
  technologies Technology[]
  tools        Tool[]
  Resume       Resume[]
}

model LanguageSkill {
  id       Int     @id @default(autoincrement())
  name     String
  level    Int
  Skills   Skills? @relation(fields: [skillsId], references: [id])
  skillsId Int?
}

model Framework {
  id       Int     @id @default(autoincrement())
  name     String
  level    Int
  Skills   Skills? @relation(fields: [skillsId], references: [id])
  skillsId Int?
}

model Technology {
  id       Int     @id @default(autoincrement())
  name     String
  level    Int
  Skills   Skills? @relation(fields: [skillsId], references: [id])
  skillsId Int?
}

model Tool {
  id       Int     @id @default(autoincrement())
  name     String
  level    Int
  Skills   Skills? @relation(fields: [skillsId], references: [id])
  skillsId Int?
}
